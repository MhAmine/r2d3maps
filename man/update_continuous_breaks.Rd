% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/d3_map_proxy.R
\name{update_continuous_breaks}
\alias{update_continuous_breaks}
\title{Update a continuous scale in Shiny}
\usage{
update_continuous_breaks(proxy, var, palette = NULL, direction = 1,
  n_breaks = 5, style = "pretty")
}
\arguments{
\item{proxy}{A \code{d3_map_proxy} object.}

\item{var}{New var to use on the map.}

\item{palette}{Color palette, you can use Viridis or Brewer color palette.}

\item{direction}{Sets the order of colors in the scale.
If 1, the default, colors are ordered from darkest to lightest.
If -1, the order of colors is reversed.}

\item{n_breaks}{Number of breaks to cut data (depending on \code{style}, number of breaks can be re-computed).}

\item{style}{Style for computing breaks, see \code{\link[classInt]{classIntervals}}.}
}
\description{
Update a continuous scale in Shiny
}
\examples{
\dontrun{

if (interactive()) {

library(r2d3maps)
library(shiny)

# data about Paris
data("paris")


# app
ui <- fluidPage(
  fluidRow(
    column(
      width = 8, offset = 2,
      tags$h2("Proxy for continuous breaks scale"),
      d3Output(outputId = "mymap"),
      selectInput(
        inputId = "var", label = "Variable:",
        choices = grep(pattern = "AGE", x = names(paris), value = TRUE)
      )
    )
  )
)

server <- function(input, output, session) {

  output$mymap <- renderD3({
    d3_map(shape = paris) \%>\%
      add_continuous_breaks(var = "AGE_00", palette = "Blues") \%>\%
      add_legend(d3_format = ".2s")
  })

  observeEvent(input$var, {
    d3_map_proxy(shinyId = "mymap", data = paris) \%>\%
      update_continuous_breaks(var = input$var, palette = "Blues")
  }, ignoreInit = TRUE)

}

shinyApp(ui, server)

}

}
}
